{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"conda-lock Conda lock is a lightweight library that can be used to generate fully reproducible lock files for conda environments. It does this by performing multiple solves for conda/mamba targeting a set of platforms you desire lockfiles for. This also has the added benefit of acting as an external presolve for conda as the lockfiles it generates results in the conda solver not being invoked when installing the packages from the generated lockfile. Features Unified lockfile format Integrated pip support Support for a variety of source formats conda environment.yml conda meta.yaml pyproject.toml (poetry, flit, pep 621) Solveless conda installation","title":"Home"},{"location":"#conda-lock","text":"Conda lock is a lightweight library that can be used to generate fully reproducible lock files for conda environments. It does this by performing multiple solves for conda/mamba targeting a set of platforms you desire lockfiles for. This also has the added benefit of acting as an external presolve for conda as the lockfiles it generates results in the conda solver not being invoked when installing the packages from the generated lockfile.","title":"conda-lock"},{"location":"#features","text":"Unified lockfile format Integrated pip support Support for a variety of source formats conda environment.yml conda meta.yaml pyproject.toml (poetry, flit, pep 621) Solveless conda installation","title":"Features"},{"location":"docker/","text":"Docker In order to use conda-lock in a docker-style context you want to add the lockfile to the docker container. This avoids the case where the conda install xyz statement is cached. Given a file tree like Dockerfile environment.yaml * conda-linux-64.lock You want a dockerfile that is structured something similar to this # Dockerfile # Build container FROM continuumio/miniconda:latest as conda ADD conda-linux-64.lock /locks/conda-linux-64.lock RUN conda create -p /opt/env --copy --file /locks/conda-linux-64.lock # Primary container FROM gcr.io/distroless/base-debian10 # copy over the generated environment COPY --from = conda /opt/env /opt/env To get this to work nicely generate the platform specific lock run conda lock --format explicit --platform linux-64 docker build . This will ensure that your conda dependencies used in this docker container are always exactly reproducible.","title":"Docker"},{"location":"docker/#docker","text":"In order to use conda-lock in a docker-style context you want to add the lockfile to the docker container. This avoids the case where the conda install xyz statement is cached. Given a file tree like Dockerfile environment.yaml * conda-linux-64.lock You want a dockerfile that is structured something similar to this # Dockerfile # Build container FROM continuumio/miniconda:latest as conda ADD conda-linux-64.lock /locks/conda-linux-64.lock RUN conda create -p /opt/env --copy --file /locks/conda-linux-64.lock # Primary container FROM gcr.io/distroless/base-debian10 # copy over the generated environment COPY --from = conda /opt/env /opt/env To get this to work nicely generate the platform specific lock run conda lock --format explicit --platform linux-64 docker build . This will ensure that your conda dependencies used in this docker container are always exactly reproducible.","title":"Docker"},{"location":"flags/","text":"Options --conda If you wish to specify a particular conda/mamba executable to use to perform the solve this can be provided as follows conda-lock --conda some_path_to_conda --mamba If you want to make use of mamba in order to perform faster solves this can be enabledd with conda-lock --mamba some_path_to_conda If mamba is not installed, it will attempt to install it using ensureconda --filename-template By default, conda-lock store its output in conda-lock.yml in the current working directory. This file will also be used by default for render, install, and update operations. You can supply a different filename with e.g. conda-lock --lockfile superspecial.conda-lock.yml The extension .conda-lock.yml will be added if not present. Rendered environment files (env or explicit) will be named as as \"conda-{platform}.lock\" . If you want to override that call conda-lock as follows. conda-lock -k explicit --filename-template \"specific-{platform}.conda.lock\" The following fields are available for templating field platform the platform for lock file (conda subdir) dev-dependencies true/false flag for --dev-dependencies input-hash a sha256 hash of the lock file input specification version the version of conda-lock used timestamp the timestamp of the output file in ISO8601 basic format --channel You can override the channels that are used by conda-lock in case you need to override the ones specified in an [environment.yml][envyaml] or any of the other supported formats. conda-lock --channel conda-forge --platform You may specify the platforms you wish to target by default directly in an [environment.yml][envyaml] If you specify target platforms on the command line with --platform , these will override the values in the environment specification. If neither platforms (from source files) nor --platforms are provided, conda-lock will fall back to a default set of platforms. --dev-dependencies/--no-dev-dependencies By default conda-lock will include dev dependencies in the specification of the lock (if the files that the lock is being built from support them). This can be disabled easily conda-lock --no-dev-dependencies --file ./recipe/meta.yaml --check-input-hash Under some situation you may want to run conda lock in some kind of automated way (eg as a precommit) and want to not need to regenerate the lockfiles if the underlying input specification for that particular lock as not changed. conda-lock --check-input-hash --platform linux-64 When the input_hash of the input files, channels match those present in a given lockfile, that lockfile will not be regenerated. --strip-auth, --auth and --auth-file By default conda-lock will leave basic auth credentials for private conda channels in the lock file. If you wish to strip authentication from the file, provide the --strip-auth argument. conda-lock --strip-auth --file environment.yml In order to conda-lock install a lock file with its basic auth credentials stripped, you will need to create an authentication file in .json format like this: { \"domain\" : \"username:password\" } If you have multiple channels that require different authentication within the same domain, you can additionally specify the channel like this: { \"domain.org/channel1\" : \"username1:password1\" , \"domain.org/channel2\" : \"username2:password2\" } You can provide the authentication either as string through --auth or as a filepath through --auth-file . conda-lock install --auth-file auth.json conda-linux-64.lock --virtual-package-spec Conda makes use of virtual packages that are available at runtime to gate dependency on system features. Due to these not generally existing on your local execution platform conda-lock will inject them into the solution environment with a reasonable guess at what a default system configuration should be. If you want to override which virtual packages are injected you can create a virtual package spec file # virtual-packages.yml subdirs : linux-64 : packages : __glibc : 2.17 __cuda : 11.4 win-64 : packages : __cuda : 11.4 conda-lock will automatically use a virtual-packages.yml it finds in the the current working directory. Alternatively one can be specified explicitly via the flag. conda lock --virtual-package-spec virtual-packages-cuda.yml --platform linux-64 Input hash stability Virtual packages take part in the input hash so if you build an environment with a different set of virtual packages the input hash will change. Additionally the default set of virtual packages may be augmented in future versions of conda-lock. If you desire very stable input hashes we recommend creating a virtual-packages.yml file to lock down the virtual packages considered. \u26a0\ufe0f in conjunction with micromamba Micromamba does not presently support some of the overrides to remove all discovered virtual packages, consequently the set of virtual packages available at solve time may be larger than those specified in your specification.","title":"Flags"},{"location":"flags/#options","text":"","title":"Options"},{"location":"flags/#-conda","text":"If you wish to specify a particular conda/mamba executable to use to perform the solve this can be provided as follows conda-lock --conda some_path_to_conda","title":"--conda"},{"location":"flags/#-mamba","text":"If you want to make use of mamba in order to perform faster solves this can be enabledd with conda-lock --mamba some_path_to_conda If mamba is not installed, it will attempt to install it using ensureconda","title":"--mamba"},{"location":"flags/#-filename-template","text":"By default, conda-lock store its output in conda-lock.yml in the current working directory. This file will also be used by default for render, install, and update operations. You can supply a different filename with e.g. conda-lock --lockfile superspecial.conda-lock.yml The extension .conda-lock.yml will be added if not present. Rendered environment files (env or explicit) will be named as as \"conda-{platform}.lock\" . If you want to override that call conda-lock as follows. conda-lock -k explicit --filename-template \"specific-{platform}.conda.lock\" The following fields are available for templating field platform the platform for lock file (conda subdir) dev-dependencies true/false flag for --dev-dependencies input-hash a sha256 hash of the lock file input specification version the version of conda-lock used timestamp the timestamp of the output file in ISO8601 basic format","title":"--filename-template"},{"location":"flags/#-channel","text":"You can override the channels that are used by conda-lock in case you need to override the ones specified in an [environment.yml][envyaml] or any of the other supported formats. conda-lock --channel conda-forge","title":"--channel"},{"location":"flags/#-platform","text":"You may specify the platforms you wish to target by default directly in an [environment.yml][envyaml] If you specify target platforms on the command line with --platform , these will override the values in the environment specification. If neither platforms (from source files) nor --platforms are provided, conda-lock will fall back to a default set of platforms.","title":"--platform"},{"location":"flags/#-dev-dependencies-no-dev-dependencies","text":"By default conda-lock will include dev dependencies in the specification of the lock (if the files that the lock is being built from support them). This can be disabled easily conda-lock --no-dev-dependencies --file ./recipe/meta.yaml","title":"--dev-dependencies/--no-dev-dependencies"},{"location":"flags/#-check-input-hash","text":"Under some situation you may want to run conda lock in some kind of automated way (eg as a precommit) and want to not need to regenerate the lockfiles if the underlying input specification for that particular lock as not changed. conda-lock --check-input-hash --platform linux-64 When the input_hash of the input files, channels match those present in a given lockfile, that lockfile will not be regenerated.","title":"--check-input-hash"},{"location":"flags/#-strip-auth-auth-and-auth-file","text":"By default conda-lock will leave basic auth credentials for private conda channels in the lock file. If you wish to strip authentication from the file, provide the --strip-auth argument. conda-lock --strip-auth --file environment.yml In order to conda-lock install a lock file with its basic auth credentials stripped, you will need to create an authentication file in .json format like this: { \"domain\" : \"username:password\" } If you have multiple channels that require different authentication within the same domain, you can additionally specify the channel like this: { \"domain.org/channel1\" : \"username1:password1\" , \"domain.org/channel2\" : \"username2:password2\" } You can provide the authentication either as string through --auth or as a filepath through --auth-file . conda-lock install --auth-file auth.json conda-linux-64.lock","title":"--strip-auth, --auth and --auth-file"},{"location":"flags/#-virtual-package-spec","text":"Conda makes use of virtual packages that are available at runtime to gate dependency on system features. Due to these not generally existing on your local execution platform conda-lock will inject them into the solution environment with a reasonable guess at what a default system configuration should be. If you want to override which virtual packages are injected you can create a virtual package spec file # virtual-packages.yml subdirs : linux-64 : packages : __glibc : 2.17 __cuda : 11.4 win-64 : packages : __cuda : 11.4 conda-lock will automatically use a virtual-packages.yml it finds in the the current working directory. Alternatively one can be specified explicitly via the flag. conda lock --virtual-package-spec virtual-packages-cuda.yml --platform linux-64","title":"--virtual-package-spec"},{"location":"flags/#input-hash-stability","text":"Virtual packages take part in the input hash so if you build an environment with a different set of virtual packages the input hash will change. Additionally the default set of virtual packages may be augmented in future versions of conda-lock. If you desire very stable input hashes we recommend creating a virtual-packages.yml file to lock down the virtual packages considered.","title":"Input hash stability"},{"location":"flags/#in-conjunction-with-micromamba","text":"Micromamba does not presently support some of the overrides to remove all discovered virtual packages, consequently the set of virtual packages available at solve time may be larger than those specified in your specification.","title":"\u26a0\ufe0f in conjunction with micromamba"},{"location":"getting_started/","text":"Installation conda-lock is available through pip , conda and mamba . pip conda mamba pip install conda-lock Install with pip support pip install conda-lock [ pip_support ] conda install -c conda-forge conda-lock mamba install -c conda-forge conda-lock","title":"Installation"},{"location":"getting_started/#installation","text":"conda-lock is available through pip , conda and mamba . pip conda mamba pip install conda-lock Install with pip support pip install conda-lock [ pip_support ] conda install -c conda-forge conda-lock mamba install -c conda-forge conda-lock","title":"Installation"},{"location":"output/","text":"Output formats Unified lockfile Conda lock's default output format is a unified multi-platform lockfile. This is defined by a pydantic model here In order to explicitly use this format conda-lock --kind lockfile To install from one of these lockfiles conda-lock install conda-lock.yml Render The unified lockfile can be rendered into the various other lockfile formats Generate both formats using conda-lock render --kind explicit --kind env Explicit lockfile The legacy format that conda lock supports. This was the default format prior to conda-lock 1.0. This format is understood natively by both conda and mamba. If your lock contains pip solved packages these can only be installed by conda-lock conda-lock --kind explicit --platform To install from this lockfile you can aither use conda/mamba directly conda create --name YOURENV --file conda-linux-64.lock or conda-lock install --name YOURENV conda-linux-64.lock Environment lockfile This format is itself a conda environment.yml that can be installed by conda env create . This format does have the drawback that using it will invoke a new solve unlike the explicit format. To install from this lockfile you can aither use conda/mamba directly conda env create --name YOURENV --file conda-linux-64.lock.yml or conda-lock install --name YOURENV conda-linux-64.lock.yml","title":"Output Formats"},{"location":"output/#output-formats","text":"","title":"Output formats"},{"location":"output/#unified-lockfile","text":"Conda lock's default output format is a unified multi-platform lockfile. This is defined by a pydantic model here In order to explicitly use this format conda-lock --kind lockfile To install from one of these lockfiles conda-lock install conda-lock.yml","title":"Unified lockfile"},{"location":"output/#render","text":"The unified lockfile can be rendered into the various other lockfile formats Generate both formats using conda-lock render --kind explicit --kind env","title":"Render"},{"location":"output/#explicit-lockfile","text":"The legacy format that conda lock supports. This was the default format prior to conda-lock 1.0. This format is understood natively by both conda and mamba. If your lock contains pip solved packages these can only be installed by conda-lock conda-lock --kind explicit --platform To install from this lockfile you can aither use conda/mamba directly conda create --name YOURENV --file conda-linux-64.lock or conda-lock install --name YOURENV conda-linux-64.lock","title":"Explicit lockfile"},{"location":"output/#environment-lockfile","text":"This format is itself a conda environment.yml that can be installed by conda env create . This format does have the drawback that using it will invoke a new solve unlike the explicit format. To install from this lockfile you can aither use conda/mamba directly conda env create --name YOURENV --file conda-linux-64.lock.yml or conda-lock install --name YOURENV conda-linux-64.lock.yml","title":"Environment lockfile"},{"location":"pip/","text":"pip support conda-lock has experimental support to allow locking mixed conda/pip environments. Usage with environment.yaml conda-lock can lock the dependencies.pip section of environment.yml , using Poetry's dependency solver, if installed with the pip_support extra. # environment.yml channels : - conda-forge dependencies : - python >=3.9 - requests - pip : - some_pip_only_library If in this case some_pip_only_library depends on requests that dependency will be met by conda and the version will be constrained to what the conda solver determines. Usage with pyproject.toml If a dependency refers directly to a URL rather than a package name and version, conda-lock will assume it is pip-installable, e.g.: # pyproject.toml [tool.poetry.dependencies] python = \"3.9\" pymage = { url = \"https://github.com/MickaelRigault/pymage/archive/v1.0.tar.gz#sha256=11e99c4ea06b76ca7fb5b42d1d35d64139a4fa6f7f163a2f0f9cc3ea0b3c55eb\" } Similarly, if a dependency is explicitly marked with source = \"pypi\" , it will be treated as a pip dependency, e.g.: [tool.poetry.dependencies] python = \"3.9\" ampel-ztf = { version = \"^0.8.0-alpha.2\" , source = \"pypi\" } In both these cases, the dependencies of pip -installable packages will also be installed with pip , unless they were already requested by a conda dependency.","title":"Pip integration"},{"location":"pip/#pip-support","text":"conda-lock has experimental support to allow locking mixed conda/pip environments.","title":"pip support"},{"location":"pip/#usage-with-environmentyaml","text":"conda-lock can lock the dependencies.pip section of environment.yml , using Poetry's dependency solver, if installed with the pip_support extra. # environment.yml channels : - conda-forge dependencies : - python >=3.9 - requests - pip : - some_pip_only_library If in this case some_pip_only_library depends on requests that dependency will be met by conda and the version will be constrained to what the conda solver determines.","title":"Usage with environment.yaml"},{"location":"pip/#usage-with-pyprojecttoml","text":"If a dependency refers directly to a URL rather than a package name and version, conda-lock will assume it is pip-installable, e.g.: # pyproject.toml [tool.poetry.dependencies] python = \"3.9\" pymage = { url = \"https://github.com/MickaelRigault/pymage/archive/v1.0.tar.gz#sha256=11e99c4ea06b76ca7fb5b42d1d35d64139a4fa6f7f163a2f0f9cc3ea0b3c55eb\" } Similarly, if a dependency is explicitly marked with source = \"pypi\" , it will be treated as a pip dependency, e.g.: [tool.poetry.dependencies] python = \"3.9\" ampel-ztf = { version = \"^0.8.0-alpha.2\" , source = \"pypi\" } In both these cases, the dependencies of pip -installable packages will also be installed with pip , unless they were already requested by a conda dependency.","title":"Usage with pyproject.toml"},{"location":"src_environment_yml/","text":"environment.yml conda-lock has first class support for environment.yml files. If no --file argument is specified conda-lock will look for an environment.yml file in the current directory. Basic example # environment.yml channels : - conda-forge dependencies : - python=3.9 - pandas Extensions conda-lock makes use of a number of non-standard extensions to the format in ordere to enable additional functionality. Platform specification You may specify the platforms you wish to target by default directly in an environment.yml using the (nonstandard) platforms key: # environment.yml channels : - conda-forge dependencies : - python=3.9 - pandas platforms : - osx-arm64 - linux-64 If you specify target platforms on the command line with -p , these will override the values in the environment specification. If neither platforms nor -p are provided, conda-lock will fall back to a default set of platforms. Categories You can may wish to split your dependencies into separate files for better organization, e.g. a environment.yml for production dependencies and a dev-environment.yml for development dependencies. You can assign all the dependencies parsed from a single file to a category using the (nonstandard) category key. # dev-environment.yml channels : - conda-forge dependencies : - pytest - mypy=0.910 category : dev The default category is main . These can be used in a compound specification as follows. ```sh conda-lock --file environment.yml --file dev-environment.yml","title":"environment.yml"},{"location":"src_environment_yml/#environmentyml","text":"conda-lock has first class support for environment.yml files. If no --file argument is specified conda-lock will look for an environment.yml file in the current directory.","title":"environment.yml"},{"location":"src_environment_yml/#basic-example","text":"# environment.yml channels : - conda-forge dependencies : - python=3.9 - pandas","title":"Basic example"},{"location":"src_environment_yml/#extensions","text":"conda-lock makes use of a number of non-standard extensions to the format in ordere to enable additional functionality.","title":"Extensions"},{"location":"src_environment_yml/#platform-specification","text":"You may specify the platforms you wish to target by default directly in an environment.yml using the (nonstandard) platforms key: # environment.yml channels : - conda-forge dependencies : - python=3.9 - pandas platforms : - osx-arm64 - linux-64 If you specify target platforms on the command line with -p , these will override the values in the environment specification. If neither platforms nor -p are provided, conda-lock will fall back to a default set of platforms.","title":"Platform specification"},{"location":"src_environment_yml/#categories","text":"You can may wish to split your dependencies into separate files for better organization, e.g. a environment.yml for production dependencies and a dev-environment.yml for development dependencies. You can assign all the dependencies parsed from a single file to a category using the (nonstandard) category key. # dev-environment.yml channels : - conda-forge dependencies : - pytest - mypy=0.910 category : dev The default category is main . These can be used in a compound specification as follows. ```sh conda-lock --file environment.yml --file dev-environment.yml","title":"Categories"},{"location":"src_meta_yaml/","text":"meta.yaml Conda build defines package recipes using the meta.yaml format. Conda-lock will attempt to make an educated guess at the desired environment spec in a meta.yaml. This is not guaranteed to work for complex recipes with many selectors and outputs or complex use of jinja templates. For multi-output recipes, conda-lock will fuse all the dependencies together. If that doesn't work for your case fall back to specifying the specification as an environment.yml # meta.yaml { % set version = \"1.0.5\" % } package : name : foo version : {{ version }} build : number : 0 script : - export PYTHONUNBUFFERED=1 # [ppc64le] - {{ PYTHON }} -m pip install --no-deps --ignore-installed . skip : True # [py2k] requirements : build : - {{ compiler('c') }} - {{ compiler('cxx') }} host : - python - pip - cython >=0.28.2 - numpy run : - python - {{ pin_compatible('numpy') }} - python-dateutil >=2.6.1 - pytz >=2017.2 - zlib # [unix] test : requires : - pytest Categories build requirements are ignored host and run dependencies are treated as main test.requires dependencies are treated as dev By default conda-lock will include dev dependencies in the specification of the lock (if the files that the lock is being built from support them). This can be disabled easily conda-lock --no-dev-dependencies --file meta.yaml Extensions Channel specification Since a meta.yaml doesn't contain channel information we make use of the following extra key to specify channels extra : channels : - conda-forge - defaults","title":"meta.yaml"},{"location":"src_meta_yaml/#metayaml","text":"Conda build defines package recipes using the meta.yaml format. Conda-lock will attempt to make an educated guess at the desired environment spec in a meta.yaml. This is not guaranteed to work for complex recipes with many selectors and outputs or complex use of jinja templates. For multi-output recipes, conda-lock will fuse all the dependencies together. If that doesn't work for your case fall back to specifying the specification as an environment.yml # meta.yaml { % set version = \"1.0.5\" % } package : name : foo version : {{ version }} build : number : 0 script : - export PYTHONUNBUFFERED=1 # [ppc64le] - {{ PYTHON }} -m pip install --no-deps --ignore-installed . skip : True # [py2k] requirements : build : - {{ compiler('c') }} - {{ compiler('cxx') }} host : - python - pip - cython >=0.28.2 - numpy run : - python - {{ pin_compatible('numpy') }} - python-dateutil >=2.6.1 - pytz >=2017.2 - zlib # [unix] test : requires : - pytest","title":"meta.yaml"},{"location":"src_meta_yaml/#categories","text":"build requirements are ignored host and run dependencies are treated as main test.requires dependencies are treated as dev By default conda-lock will include dev dependencies in the specification of the lock (if the files that the lock is being built from support them). This can be disabled easily conda-lock --no-dev-dependencies --file meta.yaml","title":"Categories"},{"location":"src_meta_yaml/#extensions","text":"","title":"Extensions"},{"location":"src_meta_yaml/#channel-specification","text":"Since a meta.yaml doesn't contain channel information we make use of the following extra key to specify channels extra : channels : - conda-forge - defaults","title":"Channel specification"},{"location":"src_pyproject/","text":"pyproject.toml Since pyproject.toml files are commonly used by python packages it can be desirable to create a lock file directly from those dependencies to single-source a package's dependencies. This makes use of some conda-forge infrastructure ( pypi-mapping ) to do a lookup of the PyPI package name to a corresponding conda package name (e.g. docker -> docker-py ). In cases where there is no lookup for the package it assumes that the PyPI name, and the conda name are the same. Features dependency resolution poetry pep621 (flit) # pyproject.toml [tool.poetry.dependencies] requests = \"^2.13.0\" toml = \">=0.10\" [tool.poetry.dev-dependencies] pytest = \">=5.1.0\" [build-system] requires = [ \"poetry>=0.12\" ] build-backend = \"poetry.masonry.api\" # pyproject.toml [project] dependencies = [ \"requests ^2.13.0\" , \"toml >=0.10\" , ] [project.optional-dependencies] test = [ \"pytest >=5.1.0\" , ] This will create a conda-lock specification with main requests ^2.13.0\" toml >=0.10 dev pytest >=5.1.0 pure pip dependencies If a dependency refers directly to a URL rather than a package name and version, conda-lock will assume it is pip-installable, e.g.: # pyproject.toml [tool.poetry.dependencies] python = \"3.9\" pymage = { url = \"https://github.com/MickaelRigault/pymage/archive/v1.0.tar.gz#sha256=11e99c4ea06b76ca7fb5b42d1d35d64139a4fa6f7f163a2f0f9cc3ea0b3c55eb\" } Similarly, if a dependency is explicitly marked with source = \"pypi\" , it will be treated as a pip dependency, e.g.: # pyproject.toml [tool.poetry.dependencies] python = \"3.9\" ampel-ztf = { version = \"^0.8.0-alpha.2\" , source = \"pypi\" } In both these cases, the dependencies of pip -installable packages will also be installed with pip , unless they were already requested by a conda dependency. Extras If your pyproject.toml file contains optional dependencies/extras these can be referred to by using the --extras flag poetry pep621 (flit) # pyproject.toml [tool.poetry.dependencies] mandatory = \"^1.0\" psycopg2 = { version = \"^2.7\" , optional = true } mysqlclient = { version = \"^1.3\" , optional = true } [tool.poetry.extras] mysql = [ \"mysqlclient\" ] pgsql = [ \"psycopg2\" ] # pyproject.toml [project] dependencies = [ \"mandatory ^1.0\" , ] [project.optional-dependencies] mysql = [ \"mysqlclient ^1.3\" ] pgsql = [ \"psycopg2 ^2.7\" ] These can be referened as follows conda-lock --extra mysql --extra pgsql -f pyproject.toml When generating lockfiles that make use of extras it is recommended to make use of --filename-template covered here . Extensions As the pyproject.toml format is not really designed for conda there are a few extensions we support in the toml file. All extensions live in the tool.conda-lock section. Channels # pyproject.toml [tool.conda-lock] channels = [ 'conda-forge' , 'defaults' ] Platforms Like in environment.yml , you can specify default platforms to target: # pyproject.toml [tool.conda-lock] platforms = [ 'osx-arm64' , 'linux-64' ] Extra conda dependencies Since in a pyproject.toml all the definitions are python dependencies if you need to specify some non-python dependencies as well this can be accomplished by adding the following sections to the pyproject.toml # pyproject.toml [tool.conda-lock.dependencies] sqlite = \">=3.34\"","title":"pyproject.toml"},{"location":"src_pyproject/#pyprojecttoml","text":"Since pyproject.toml files are commonly used by python packages it can be desirable to create a lock file directly from those dependencies to single-source a package's dependencies. This makes use of some conda-forge infrastructure ( pypi-mapping ) to do a lookup of the PyPI package name to a corresponding conda package name (e.g. docker -> docker-py ). In cases where there is no lookup for the package it assumes that the PyPI name, and the conda name are the same.","title":"pyproject.toml"},{"location":"src_pyproject/#features","text":"","title":"Features"},{"location":"src_pyproject/#dependency-resolution","text":"poetry pep621 (flit) # pyproject.toml [tool.poetry.dependencies] requests = \"^2.13.0\" toml = \">=0.10\" [tool.poetry.dev-dependencies] pytest = \">=5.1.0\" [build-system] requires = [ \"poetry>=0.12\" ] build-backend = \"poetry.masonry.api\" # pyproject.toml [project] dependencies = [ \"requests ^2.13.0\" , \"toml >=0.10\" , ] [project.optional-dependencies] test = [ \"pytest >=5.1.0\" , ] This will create a conda-lock specification with main requests ^2.13.0\" toml >=0.10 dev pytest >=5.1.0","title":"dependency resolution"},{"location":"src_pyproject/#pure-pip-dependencies","text":"If a dependency refers directly to a URL rather than a package name and version, conda-lock will assume it is pip-installable, e.g.: # pyproject.toml [tool.poetry.dependencies] python = \"3.9\" pymage = { url = \"https://github.com/MickaelRigault/pymage/archive/v1.0.tar.gz#sha256=11e99c4ea06b76ca7fb5b42d1d35d64139a4fa6f7f163a2f0f9cc3ea0b3c55eb\" } Similarly, if a dependency is explicitly marked with source = \"pypi\" , it will be treated as a pip dependency, e.g.: # pyproject.toml [tool.poetry.dependencies] python = \"3.9\" ampel-ztf = { version = \"^0.8.0-alpha.2\" , source = \"pypi\" } In both these cases, the dependencies of pip -installable packages will also be installed with pip , unless they were already requested by a conda dependency.","title":"pure pip dependencies"},{"location":"src_pyproject/#extras","text":"If your pyproject.toml file contains optional dependencies/extras these can be referred to by using the --extras flag poetry pep621 (flit) # pyproject.toml [tool.poetry.dependencies] mandatory = \"^1.0\" psycopg2 = { version = \"^2.7\" , optional = true } mysqlclient = { version = \"^1.3\" , optional = true } [tool.poetry.extras] mysql = [ \"mysqlclient\" ] pgsql = [ \"psycopg2\" ] # pyproject.toml [project] dependencies = [ \"mandatory ^1.0\" , ] [project.optional-dependencies] mysql = [ \"mysqlclient ^1.3\" ] pgsql = [ \"psycopg2 ^2.7\" ] These can be referened as follows conda-lock --extra mysql --extra pgsql -f pyproject.toml When generating lockfiles that make use of extras it is recommended to make use of --filename-template covered here .","title":"Extras"},{"location":"src_pyproject/#extensions","text":"As the pyproject.toml format is not really designed for conda there are a few extensions we support in the toml file. All extensions live in the tool.conda-lock section.","title":"Extensions"},{"location":"src_pyproject/#channels","text":"# pyproject.toml [tool.conda-lock] channels = [ 'conda-forge' , 'defaults' ]","title":"Channels"},{"location":"src_pyproject/#platforms","text":"Like in environment.yml , you can specify default platforms to target: # pyproject.toml [tool.conda-lock] platforms = [ 'osx-arm64' , 'linux-64' ]","title":"Platforms"},{"location":"src_pyproject/#extra-conda-dependencies","text":"Since in a pyproject.toml all the definitions are python dependencies if you need to specify some non-python dependencies as well this can be accomplished by adding the following sections to the pyproject.toml # pyproject.toml [tool.conda-lock.dependencies] sqlite = \">=3.34\"","title":"Extra conda dependencies"},{"location":"cli/gen/","text":"CLI Reference This is an automatically generated api doc of the flags and arguments that can be passed to conda-lock and its various subcommands. conda-lock To get help for subcommands, use the conda-lock --help Usage: conda-lock [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False conda-lock install Usage: conda-lock install [OPTIONS] [LOCK_FILE] Options: Name Type Description Default --conda text path (or name) of the conda/mamba executable to use. None --mamba / --no-mamba boolean don't attempt to use or install mamba. False --micromamba / --no-micromamba boolean don't attempt to use or install micromamba. False -p , --prefix text Full path to environment location (i.e. prefix). None -n , --name text Name of environment. None --auth text The auth file provided as string. Has precedence over --auth-file . `` --auth-file text Path to the authentication file. `` --validate-platform / --no-validate-platform boolean Whether the platform compatibility between your lockfile and the host system should be validated. True --log-level choice ( DEBUG | INFO | WARNING | ERROR | CRITICAL ) Log level. INFO --dev / --no-dev boolean install dev dependencies from the lockfile (where applicable) True -E , --extras text include extra dependencies from the lockfile (where applicable) [] --help boolean Show this message and exit. False conda-lock lock Generate fully reproducible lock files for conda environments. By default, the lock files are written to conda-{platform}.lock. These filenames can be customized using the --filename-template argument. The following tokens are available: platform: The platform this lock file was generated for (conda subdir). dev-dependencies: Whether or not dev dependencies are included in this lock file. input-hash: A sha256 hash of the lock file input specification. version: The version of conda-lock used to generate this lock file. timestamp: The approximate timestamp of the output file in ISO8601 basic format. Usage: conda-lock lock [OPTIONS] Options: Name Type Description Default --conda text path (or name) of the conda/mamba executable to use. None --mamba / --no-mamba boolean don't attempt to use or install mamba. False --micromamba / --no-micromamba boolean don't attempt to use or install micromamba. False -p , --platform text generate lock files for the following platforms None -c , --channel text Override the channels to use when solving the environment. These will replace the channels as listed in the various source files. None --dev-dependencies / --no-dev-dependencies boolean include dev dependencies in the lockfile (where applicable) True -f , --file path path to a conda environment specification(s) [PosixPath('environment.yml')] -k , --kind text Kind of lock file(s) to generate [should be one of 'lock', 'explicit', or 'env']. ['lock'] --filename-template text Template for single-platform (explicit, env) lock file names. Filename must include {platform} token, and must not end in '.yml'. For a full list and description of available tokens, see the command help text. conda-{platform}.lock --lockfile text Path to a conda-lock.yml to create or update conda-lock.yml --strip-auth boolean Strip the basic auth credentials from the lockfile. False -e , --extras text When used in conjunction with input sources that support extras (pyproject.toml) will add the deps from those extras to the input specification [] --check-input-hash boolean Check existing input hashes in lockfiles before regenerating lock files. If no files were updated exit with exit code 4. Incompatible with --strip-auth False --log-level choice ( DEBUG | INFO | WARNING | ERROR | CRITICAL ) Log level. INFO --pdb boolean Drop into a postmortem debugger if conda-lock crashes False --virtual-package-spec path Specify a set of virtual packages to use. None --update text Packages to update to their latest versions. If empty, update all. None --help boolean Show this message and exit. False conda-lock render Render multi-platform lockfile into single-platform env or explicit file Usage: conda-lock render [OPTIONS] [LOCK_FILE] Options: Name Type Description Default --dev-dependencies / --no-dev-dependencies boolean include dev dependencies in the lockfile (where applicable) True -k , --kind choice ( explicit | env ) Kind of lock file(s) to generate. ['explicit'] --filename-template text Template for the lock file names. Filename must include {platform} token, and must not end in '.yml'. For a full list and description of available tokens, see the command help text. conda-{platform}.lock -e , --extras text When used in conjunction with input sources that support extras (pyproject.toml) will add the deps from those extras to the input specification [] --log-level choice ( DEBUG | INFO | WARNING | ERROR | CRITICAL ) Log level. INFO --pdb boolean Drop into a postmortem debugger if conda-lock crashes False --help boolean Show this message and exit. False","title":"CLI Reference"},{"location":"cli/gen/#cli-reference","text":"This is an automatically generated api doc of the flags and arguments that can be passed to conda-lock and its various subcommands.","title":"CLI Reference"},{"location":"cli/gen/#conda-lock","text":"To get help for subcommands, use the conda-lock --help Usage: conda-lock [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False","title":"conda-lock"},{"location":"cli/gen/#conda-lock-install","text":"Usage: conda-lock install [OPTIONS] [LOCK_FILE] Options: Name Type Description Default --conda text path (or name) of the conda/mamba executable to use. None --mamba / --no-mamba boolean don't attempt to use or install mamba. False --micromamba / --no-micromamba boolean don't attempt to use or install micromamba. False -p , --prefix text Full path to environment location (i.e. prefix). None -n , --name text Name of environment. None --auth text The auth file provided as string. Has precedence over --auth-file . `` --auth-file text Path to the authentication file. `` --validate-platform / --no-validate-platform boolean Whether the platform compatibility between your lockfile and the host system should be validated. True --log-level choice ( DEBUG | INFO | WARNING | ERROR | CRITICAL ) Log level. INFO --dev / --no-dev boolean install dev dependencies from the lockfile (where applicable) True -E , --extras text include extra dependencies from the lockfile (where applicable) [] --help boolean Show this message and exit. False","title":"install"},{"location":"cli/gen/#conda-lock-lock","text":"Generate fully reproducible lock files for conda environments. By default, the lock files are written to conda-{platform}.lock. These filenames can be customized using the --filename-template argument. The following tokens are available: platform: The platform this lock file was generated for (conda subdir). dev-dependencies: Whether or not dev dependencies are included in this lock file. input-hash: A sha256 hash of the lock file input specification. version: The version of conda-lock used to generate this lock file. timestamp: The approximate timestamp of the output file in ISO8601 basic format. Usage: conda-lock lock [OPTIONS] Options: Name Type Description Default --conda text path (or name) of the conda/mamba executable to use. None --mamba / --no-mamba boolean don't attempt to use or install mamba. False --micromamba / --no-micromamba boolean don't attempt to use or install micromamba. False -p , --platform text generate lock files for the following platforms None -c , --channel text Override the channels to use when solving the environment. These will replace the channels as listed in the various source files. None --dev-dependencies / --no-dev-dependencies boolean include dev dependencies in the lockfile (where applicable) True -f , --file path path to a conda environment specification(s) [PosixPath('environment.yml')] -k , --kind text Kind of lock file(s) to generate [should be one of 'lock', 'explicit', or 'env']. ['lock'] --filename-template text Template for single-platform (explicit, env) lock file names. Filename must include {platform} token, and must not end in '.yml'. For a full list and description of available tokens, see the command help text. conda-{platform}.lock --lockfile text Path to a conda-lock.yml to create or update conda-lock.yml --strip-auth boolean Strip the basic auth credentials from the lockfile. False -e , --extras text When used in conjunction with input sources that support extras (pyproject.toml) will add the deps from those extras to the input specification [] --check-input-hash boolean Check existing input hashes in lockfiles before regenerating lock files. If no files were updated exit with exit code 4. Incompatible with --strip-auth False --log-level choice ( DEBUG | INFO | WARNING | ERROR | CRITICAL ) Log level. INFO --pdb boolean Drop into a postmortem debugger if conda-lock crashes False --virtual-package-spec path Specify a set of virtual packages to use. None --update text Packages to update to their latest versions. If empty, update all. None --help boolean Show this message and exit. False","title":"lock"},{"location":"cli/gen/#conda-lock-render","text":"Render multi-platform lockfile into single-platform env or explicit file Usage: conda-lock render [OPTIONS] [LOCK_FILE] Options: Name Type Description Default --dev-dependencies / --no-dev-dependencies boolean include dev dependencies in the lockfile (where applicable) True -k , --kind choice ( explicit | env ) Kind of lock file(s) to generate. ['explicit'] --filename-template text Template for the lock file names. Filename must include {platform} token, and must not end in '.yml'. For a full list and description of available tokens, see the command help text. conda-{platform}.lock -e , --extras text When used in conjunction with input sources that support extras (pyproject.toml) will add the deps from those extras to the input specification [] --log-level choice ( DEBUG | INFO | WARNING | ERROR | CRITICAL ) Log level. INFO --pdb boolean Drop into a postmortem debugger if conda-lock crashes False --help boolean Show this message and exit. False","title":"render"}]}